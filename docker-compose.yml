services:
  backend:
    build:
      context: ./backend
    container_name: pdv_backend_api
    environment:
      DB_URL: ${DB_URL}
      DB_USERNAME: ${DB_USERNAME}
      DB_PASSWORD: ${DB_PASSWORD}
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
      JWT_EXPIRATION: ${JWT_EXPIRATION}
    ports:
      - "8080:8080"
    depends_on:
      - db
    networks:
      - app_network

  frontend:
    build:
      context: ./frontend
    container_name: pdv_frontend_app
    ports:
      - "4200:80"
    depends_on:
      - backend
    networks:
      - app_network

    restart: always


  db:
    image: postgres:16
    container_name: database
    restart: always
    environment:
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    volumes:
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
      - pgdata:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    networks:
      - app_network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${DB_USERNAME} -d ${DB_NAME}" ]
      interval: 10s
      retries: 5
      start_period: 10s

volumes:
  pgdata:


networks:
  app_network:
    driver: bridge
